service: florify-auth

provider:
  name: aws
  runtime: python3.9
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  environment:
    CLIENT_ID: 76i7it21omdm3n80nf9j9dc2oc
    COGNITO_USER_POOL_ID: eu-north-1_i7vhr8PxH
    COGNITO_REGION: eu-north-1
    USER_ID_CLAIM: sub
  iam:
    role:
      statements:
        # Cognito permissions for authentication
        - Effect: "Allow"
          Action:
            - cognito-idp:SignUp
            - cognito-idp:ConfirmSignUp
            - cognito-idp:ResendConfirmationCode
            - cognito-idp:InitiateAuth
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminResendConfirmationCode
            - cognito-idp:ListUsers
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminRemoveUserFromGroup
          Resource: "*"
        # CloudWatch Logs permissions
        - Effect: "Allow"
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
          Resource: "*"
        # Lambda permissions
        - Effect: "Allow"
          Action:
            - lambda:InvokeFunction
            - lambda:GetFunction
            - lambda:ListFunctions
            - lambda:CreateFunction
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            - lambda:DeleteFunction
            - lambda:GetFunctionConfiguration
            - lambda:ListVersionsByFunction
            - lambda:PublishVersion
            - lambda:CreateAlias
            - lambda:UpdateAlias
            - lambda:DeleteAlias
            - lambda:GetAlias
            - lambda:ListAliases
            - lambda:AddPermission
            - lambda:RemovePermission
            - lambda:GetPolicy
          Resource: "*"
        # API Gateway permissions
        - Effect: "Allow"
          Action:
            - apigateway:*
            - execute-api:*
          Resource: "*"
        # CloudFormation permissions (for serverless deployment)
        - Effect: "Allow"
          Action:
            - cloudformation:*
          Resource: "*"
        # IAM permissions (for creating execution roles)
        - Effect: "Allow"
          Action:
            - iam:CreateRole
            - iam:DeleteRole
            - iam:GetRole
            - iam:PassRole
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:ListAttachedRolePolicies
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:GetRolePolicy
            - iam:ListRolePolicies
          Resource: "*"

  httpApi:
    cors:
      allowedOrigins:
        - "http://localhost:5173"
        - "*"  # you can remove this after testing
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: false

functions:
  signup:
    handler: signup_handler.handler
    events:
      - httpApi:
          path: /signup
          method: post

  confirm:
    handler: confirm_handler.handler
    events:
      - httpApi:
          path: /confirm
          method: post

  resend:
    handler: resend_handler.handler
    events:
      - httpApi:
          path: /resend
          method: post

  login:
    handler: login_handler.handler
    events:
      - httpApi:
          path: /login
          method: post

  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /hello
          method: get

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - .venv/**